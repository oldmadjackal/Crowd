
#ifndef  CROWD_KERNEL_H 

#define  CROWD_KERNEL_H 

#include "..\Crowd_Model\Crowd_Model.h"
#include "..\Crowd_Feature\Crowd_Feature.h"
#include "..\Crowd_Message\Crowd_Message.h"
#include "..\Crowd_Object\Crowd_Object.h"

#include <string>

#ifdef CROWD_KERNEL_EXPORTS
#define CROWD_KERNEL_API __declspec(dllexport)
#else
#define CROWD_KERNEL_API __declspec(dllimport)
#endif

/*----------------------------- Описание "входа" программного модуля */

    struct Crowd_Module_Entry {
		       class Crowd_Kernel *entry ;     /* Вход */
				  HMODULE  module ;    /* Дескриптор DLL */
                              } ;

/*----------------------------------------- Описание "входа" ресурса */

    struct Crowd_Resource {
		              char  name[256] ;      /* Название */
		              void *ptr ;	     /* Указатель */
                          } ;

/*-------------------------------------- Описание данных вычислителя */

    struct Crowd_Parameter {
		               char  name[256] ;     /* Название */
		             double  value ;	     /* Значение */
		             double *ptr ;	     /* Указатель */
                           } ;
/*---------------------------------------- Описание Контекста модуля */

   struct Crowd_Context {
                          char  name[64] ;    /* Название контекста */
                          void *data ;        /* Данные модуля */
            class Crowd_Kernel *module ;      /* Ссылка на модуль */

                        }  ;
/*---------------------------------------- Описание связанного имени */

    struct Crowd_Name {
		              char  name[256] ;      /* Имя */
		              char  module[256] ;    /* Связанный модуль */
		      } ;
/*------------------------------ Описание перенаправления управления */

   struct Crowd_Redirect {
                           char *master ;     /* Префикс модуля */
                           char *command ;    /* Команда */
             class Crowd_Kernel *module ;     /* Ссылка на модуль */

                         }  ;
/*---------------------------------------- Описание слота результата */

   struct Crowd_Result {
                         char  id[256] ;    /* Идентификатор */
                         void *result ;     /* Результат */
                       }  ;
/*---------------------------------- Интерфейс к системе отображения */

    struct Crowd_Display {
		            int  (* GetList)        (int) ;     /* Резервирование дисплейного списка */
		           void  (* ReleaseList)    (int) ;     /* Освобождение дисплейного списка */
		            int  (* SetFirstContext)(char *) ;  /* Установить первый дисплейного контекст */
		            int  (* SetNextContext) (char *) ;  /* Установить следующий дисплейный контекст */
		           void  (* ShowContext)    (char *) ;  /* Отобразить контекст */
		         double  (* GetContextPar)  (char *) ;  /* Выдать параметр контекста */
                         } ;
/*---------------------------------- Описание "входа" обратной связи */

typedef  int (CALLBACK *Crowd_Kernel_CallBack)(int, void *)  ;

    struct Crowd_CB_Entry {
		                char  name[64] ;       /* Название */
	       Crowd_Kernel_CallBack  proc ;	     /* Указатель */
			  } ;

#define  _CALLB_MAX  10

/*----------------------------------------------- Управление памятью */

 typedef  struct {
                    char  entry[128] ;  /* Название входа */
                     int  idx1 ;        /* 1-ый индекс */
                     int  idx2 ;        /* 2-ой индекс */

                    void *ptr  ;        /* Указатель на блок памяти */
                    long  size ;        /* Размер блокa памяти */
                     int  used ;        /* Флаг использования */
                  time_t  time ;        /* Время создания */

                 }  Crowd_Memory ;

/*----------------------------------------------- Кэширование файлов */

 typedef  struct {
                    char  path[FILENAME_MAX] ;
                    char *data ;
                 }  Crowd_File ;

/*------------------------------------- Интерфейс межмодульной связи */

  class CROWD_KERNEL_API Crowd_IFace {

    public:
                                     char *std_iface ;

    public:
             virtual  void  vClear (void) ;              /* Сбросить данные */
             virtual  void  vSignal(char *, void *) ;    /* Создать сигнал */
             virtual  void  vPass  (Crowd_IFace *) ;     /* Транзит сигнала */
             virtual   int  vDecode(char *, void *) ;    /* Разбор сигнала */
             virtual   int  vCheck (char * ) ;           /* Проверка сигнала */
                                             
    public:
                            Crowd_IFace() ;              /* Конструктор */
                           ~Crowd_IFace() ;              /* Деструктор */

                                     } ; 

/*------------------------------------------------ Описание сообытия */

   struct Crowd_Event {
                         Crowd_Object *source ;    /* Источник */
                         Crowd_Object *object ;    /* Объект */
                      }  ;
/*------------------------------ Описание класса программного модуля */

  class CROWD_KERNEL_API Crowd_Kernel {

   public : 
    static   Crowd_Kernel  *kernel ;	            /* Модуль-ядро */
    static           HWND   kernel_wnd ;            /* Окно ядра */
    static           HWND   active_wnd ;            /* Активное oкно */
    static      HINSTANCE   kernel_inst ;           /* Идентификатор модуля ядра */

    static            int   debug_stop ;            /* Флаг остановки исполнения */
    static            int   debug_next ;            /* Флаг исполнения очередного шага */
#define                    _CROWD_KERNEL_NEXT_STEP  1
#define                    _CROWD_KERNEL_WAIT_STEP  2

    static   Crowd_Kernel  *priority_entry ;	    /* Модуль для приоритетного вызова */
    static   Crowd_Kernel **events_entry ;            /* Список модулей, имеющих процедуры обработки событий */
    static            int   events_entry_cnt ;

    static   Crowd_Object **kernel_objects ;          /* Список объектов */
    static            int   kernel_objects_cnt ;

    static  Crowd_Message **kernel_messages ;         /* Список сообщений */
    static            int   kernel_messages_cnt ;

    static     Crowd_Name **kernel_names ;            /* Список связанных имен */
    static            int   kernel_names_cnt ;

    static   Crowd_Kernel **feature_modules ;         /* Список модулей-свойств */
    static            int   feature_modules_cnt ;

    static   Crowd_Kernel **calculate_modules ;       /* Список вычислителей */
    static            int   calculate_modules_cnt ;

    static     Crowd_File  *files ;                   /* Список кэшированных файлов */
    static            int   files_cnt ;

    static   Crowd_Result **results ;                 /* Стек результатов работы модулей */
    static            int   results_cnt ;

    static Crowd_CB_Entry   callbacks[_CALLB_MAX] ;   /* Функции обратной связи */

    static  Crowd_Display   display ;                 /* Интерфейс к системе отображения */

    static            int   srand_fixed ;             /* Флаг использования фиксированного генератора случайных чисел */

    static         double   calc_time_step ;          /* Квант процессов моделирования по времени */ 
    static         double   show_time_step ;          /* Частота отображения сцены по времени */ 

    static            int   debug_flag ;
    static           char   debug_list[1024] ;        /* Список отлаживаемых модулей */ 
   
   public : 
		  HMODULE   DLL_module ;              /* Дескриптор DLL, содержащей модуль */
       Crowd_Module_Entry  *modules ;	              /* Список подчиненных модулей */
		      int   modules_cnt ;
	   Crowd_Resource  *resources ;	              /* Список используемых ресурсов */
		      int   resources_cnt ;
           Crowd_Redirect  *command_redirect ;        /* Список перенаправления команд */
                      int   command_redirect_cnt ;

   public :
                   char  *keyword ;	            /* Ключевое слов - идентификатор проекта */
                   char  *identification ;          /* Идентификатор модуля */
                   char  *category ;                /* Категория программного модуля */
                   char  *lego_type ;               /* Тип Lego-элемента */
                   char  *lego_set ;                /* Набор Lego-элементов */
                    int   priority ;                /* Приоритет перехвата управления */
                    int   events_processing ;       /* Флаг собственной обработки событий */
                    
	  	    int   attempt ;		    /* Сетчик "кругов" */

   public:
		   void	  SetKernel(const HWND,         /* Назначение ядра */
				    const HINSTANCE) ; 
  Crowd_Kernel_CallBack   SetCallB (char *,             /* Задание функции обратной связи */
				    Crowd_Kernel_CallBack) ;
  Crowd_Kernel_CallBack   GetCallB (char *) ;           /* Запрос функции обратной связи */
                   void  *Resource (const char *,       /* Регистрация ресурса */
				    const char * ) ; 
		    int	  Load     (const char *) ;     /* Загрузка используемых модулей */
                   char  *FileCache(char *, char *) ;   /* Загрузка файла в память */
		    int	  Free     (void) ;	        /* Освобождение используемых модулей */
		    
   public:
	    virtual int   vKernelEvents (void) ;           /* Обработка событий */

   public:
     virtual                void  vStart              (void) ;                     /* Стартовая разводка */
     virtual                void  vInit               (void) ;                     /* Инициализация связей */
     virtual                void  vReadSave           (std::string *) ;            /* Считать данные из строки */
     virtual                void  vWriteSave          (std::string *) ;            /* Записать данные в строку */
     virtual        Crowd_Object *vCreateObject       (Crowd_Model_data *) ;       /* Создать объект */
     virtual       Crowd_Feature *vCreateFeature      (Crowd_Object *,             /* Создать свойство */
                                                       Crowd_Feature * ) ;
     virtual Crowd_Communication *vCreateCommunication(Crowd_Object *,             /* Создать связь */
                                                       Crowd_Object *,
                                                       Crowd_Communication *) ;
     virtual       Crowd_Message *vCreateMessage      (Crowd_Object *,             /* Создать сообщение */
                                                       Crowd_Object *,
                                                       Crowd_Message *) ;
     virtual                 int  vAddMessage         (Crowd_Message *, int) ;     /* Регистрация сообщения в очереди */

     virtual                 int  vExecuteCmd         (const char *) ;             /* Выполнить команду */
     virtual                 int  vExecuteCmd         (const char *,               /* Выполнить команду с выдачей результата по ссылке */
                                                        Crowd_IFace *) ;
     virtual                 int  vCalculate          (char *, char *,             /* Вычислить выражение */
                                                        struct Crowd_Parameter *,
                                                        struct Crowd_Parameter *,
                                                        double *, void **, char *) ;
     virtual                 int  vGetParameter       (char *, char *) ;           /* Получить параметр */
     virtual                void  vSetParameter       (char *, char *) ;           /* Установить параметр */
     virtual                void  vProcess            (void) ;                     /* Выполнить целевой функционал */
     virtual                void  vShow               (char *) ;                   /* Отобразить связанные данные */
     virtual                void  vChangeContext      (void)  ;                    /* Выполнить действие в контексте потока */

     virtual                 int  vSpecial            (char *, void *, char *) ;   /* Специальный интерфейс */

     virtual       Crowd_Context *vAddData            (Crowd_Context ***) ;        /* Ввод контекста в список контекстов */
     virtual                 int  vReadData           (Crowd_Context ***,          /* Считать данные контекста модуля из строки */
                                                       std::string * ) ;
     virtual                void  vWriteData          (Crowd_Context *,            /* Записать данные контекста модуля в строку */
                                                       std::string * ) ;
     virtual                void  vReleaseData        (Crowd_Context *) ;          /* Освободить ресурсы данных контекста модуля */

     virtual              double  vGetTime            (void) ;                     /* Системное время */

    public:

                          double  gGaussianValue      (double, double) ;           /* Нормальное распределение */

    public:

     static          int   Crowd_Kernel::memchk_regime ;
#define                     _MEMCHECK_OFF      0
#define                     _MEMCHECK_ACTUAL   1
#define                     _MEMCHECK_HISTORY  2
     static Crowd_Memory  *Crowd_Kernel::memchk_list ;
     static          int   Crowd_Kernel::memchk_list_max ; 
     static          int   Crowd_Kernel::memchk_list_idx ; 
     static          int   Crowd_Kernel::memchk_rep_num ; 

		    void  gMemOnOff     (int) ;
		    void  gMemList      (char *) ;
		    void *gMemCalloc    (size_t, size_t, char *, int, int) ;  
		    void *gMemRealloc   (void *, size_t, char *, int, int) ;  
		    void  gMemFree      (void *) ;
		     int  gMemCheck     (void) ;
                    void  iMemAddList   (void *, int, char *, int, int) ;
                    void  iMemDelList   (void *) ;

    public:
		    void  iErrorMsg     (const char *) ;   /* Формирование сообщений об ошибках */
		    void  iLogFile      (const char *) ;   /* Запись сообщения в лог файл */

    public:
			  Crowd_Kernel    () ;               /* Конструктор */
			 ~Crowd_Kernel    () ;               /* Деструктор */
		                  } ;

/*-------------------------------------------------------- Сообщения */

#define  _USER_EXECUTE_COMMAND    101    /* Выполнить команду */
#define  _USER_COMMAND_PREFIX     102    /* Установка префикса командной строки */
#define  _USER_DEFAULT_OBJECT     103    /* Установка объекта по умолчанию */

#define  _USER_DIRECT_COMMAND     201    /* Задание секции прямого управления */

#define  _USER_SHOW               301    /* Отображение */
#define  _USER_CHANGE_CONTEXT     302    /* Выполнить в контексте потока сообщений */

#define  _USER_THREAD_ADD         401    /* Зарегистрировать рабочий поток */
#define  _USER_THREAD_DELETE      402    /* Исключить рабочий поток */

#define  _USER_ERROR_MESSAGE      901    /* Сообщение об ошибке */
#define  _USER_SHOW_COMMAND       902    /* Показать команду */
#define  _USER_SHOW_INFO          903    /* Показать информацию об объекте */
#define  _USER_INFO_MESSAGE       904    /* Сообщение не об ошибке */
#define  _USER_CHECK_MESSAGE      905    /* Сообщение контрольных условий сцены: пересечение, ограничения и прочее */
#define  _USER_THREAD_MESSAGE     906    /* Сообщение об исполнении потока */

#define  _USER_REFRESH              1
#define  _USER_LOG                  2 


/*-------------------------------------------------------------------*/

#endif        // CROWD_KERNEL_H 
